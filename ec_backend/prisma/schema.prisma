generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model LoginLog {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String 
  loggedAt DateTime
}

model User {
  id String @id @default(uuid())
  name String @db.VarChar(150)
  bio String? @db.Text
  birthdate DateTime? @db.Date
  city String? @db.VarChar(50)
  state String? @db.VarChar(50)
  country String? @db.VarChar(50)
  avatarUrl String? @db.VarChar(250) @default("https://englishconversations-files.s3.us-east-1.amazonaws.com/images/user_placeholder.png")
  languageLevel CEFRLevels @default(A1)
  email String @db.VarChar(250) @unique
  isEmailVerified Boolean @default(false)
  emailVerificationToken String? @db.Text
  emailTokenExpires DateTime? @db.DateTime()
  password String @db.VarChar(255)
  refreshToken String? @db.Text
  passwordResetToken String? @db.VarChar(64)
  resetPasswordExpires DateTime? @db.DateTime()
  role UserRoles @default(STUDENT)
  lastLogin DateTime? @db.DateTime()
  logins LoginLog[]
  units UserUnit[]
  chapters UserChapter[]
  answeredExercises AnsweredExercise[]
  answeredQuizzes AnsweredQuiz[]
  videoProgresses VideoProgress[]
  slideshowProgresses SlideshowProgress []
  notifications UserNotification[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([city])
  @@index([state])
  @@index([country])
}

model Exercise {
  id Int @id @default(autoincrement())
  type ExerciseTypes
  description String @db.Text
  columnA Json?
  columnB Json?
  contentUrl String? @db.VarChar(250)
  level CEFRLevels
  difficulty Difficulty
  options Json?
  correctAnswer Json
  tags ExerciseTag[]
  quiz Quiz? @relation(fields: [quizId], references: [id])
  quizId String?
  studentAnswers AnsweredExercise[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([level])
  @@index([difficulty])
  @@index([quizId])
}

model AnsweredExercise {
  id String @id @default(uuid())
  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  exerciseId Int
  user User @relation(fields: [userId], references: [id])
  userId String
  answeredQuiz AnsweredQuiz? @relation(fields: [answeredQuizId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  answeredQuizId String?
  isRetry Boolean @default(false)
  selectedAnswers Json?
  textAnswer String? @db.VarChar(255)
  isCorrectAnswer Boolean @default(false)
  feedback String? @db.Text
  elapsedTime Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([exerciseId])
  @@index([answeredQuizId])
}

model Quiz {
  id String @id @default(uuid())
  isTest Boolean @default(false)
  title String @db.VarChar(50)
  description String @db.Text
  imageUrl String? @db.VarChar(250)
  level CEFRLevels?
  difficulty Difficulty
  tags QuizTag[]
  unit Unit? @relation(fields: [unitId], references: [id])
  unitId Int?
  exercises Exercise[]
  answers AnsweredQuiz[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([level])
  @@index([difficulty])
}

model AnsweredQuiz {
  id String @id @default(uuid())
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  quizId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  answers AnsweredExercise[]
  score Int 
  feedback String? @db.Text
  elapsedTime Int @default(0)
  isRetry Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([quizId])
  @@index([userId, quizId])
}

model Tag {
  id Int @id @default(autoincrement())
  title String @db.VarChar(100) @unique
  exerciseTags ExerciseTag[]
  quizTags QuizTag[]
  unitTags UnitTag[]
  videoTags VideoTag[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model ExerciseTag {
  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  exerciseId Int
  tag Tag @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId Int

  @@id([exerciseId, tagId])
}

model QuizTag {
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  quizId String
  tag Tag @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId Int

  @@id([quizId, tagId])
}

model UnitTag {
  unit Unit @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unitId Int
  tag Tag @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId Int

  @@id([unitId, tagId])
}

model VideoTag {
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  videoId String
  tag Tag @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId Int

  @@id([videoId, tagId])
}

model Unit {
  id Int @id @default(autoincrement())
  name String @db.VarChar(150)
  description String @db.Text
  imageUrl String? @db.VarChar(250)
  chapter Chapter @relation(fields: [chapterId], references: [id])
  chapterId String 
  videos Video[]
  tags UnitTag[]
  quizzes Quiz[]
  users UserUnit[]
  slideshows Slideshow[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserUnit {
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  unit Unit @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unitId Int
  status Status @default(LOCKED)
  progress Float @default(0)
  completedAt DateTime? @db.DateTime()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([userId, status])
  @@index([userId, unitId])
}

model Chapter {
  id String @id @default(uuid())
  name String @db.VarChar(100)
  description String @db.Text
  imageUrl String? @db.VarChar(250)
  units Unit[]
  usersProgress UserChapter[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserChapter {
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chapterId String
  status Status @default(LOCKED)
  progress Float @default(0)
  completedAt DateTime? @db.DateTime()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([userId, status])
  @@index([userId, chapterId])
}

model Video {
  id String @id @default(uuid())
  title String @db.VarChar(100)
  description String? @db.Text
  url String @db.VarChar(250)
  duration Int? 
  thumbnailUrl String? @db.VarChar(250)
  feedback Int @default(0)
  videoTags VideoTag[]
  unit Unit? @relation(fields: [unitId], references: [id])
  unitId Int?
  videoProgresses VideoProgress[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VideoProgress {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  videoId String
  progress Int @default(0)
  watchedDuration Int @default(0)
  watchedCount Int @default(0)
  lastWatchedAt DateTime? @db.DateTime()
  startedAt DateTime? @db.DateTime()
  completedAt DateTime? @db.DateTime()
  completed Boolean @default(false)
  isFavorite Boolean @default(false)
  note String? @db.Text 
  
  @@unique([userId, videoId])
}

model Notification {
  id Int @id @default(autoincrement())
  type NotificationTypes
  title String @db.VarChar(150)
  content String @db.Text
  actionUrl String? @db.VarChar(250)
  expirationDate DateTime? @db.Date
  createdAt DateTime @default(now())
  notifications UserNotification[]
}

model UserNotification {
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  notificationId Int
  isRead Boolean @default(false)
  deliveredAt DateTime @db.DateTime()
  readAt DateTime? @db.DateTime()
  deliveredViaEmail Boolean?
  deliveredViaApp Boolean?
}

model Slideshow {
  id String @id @default(uuid())
  title String @db.VarChar(100)
  unit Unit @relation(fields: [unitId], references: [id])
  unitId Int
  slides Slide[]
  userProgresses SlideshowProgress[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Slide {
  id String @id @default(uuid())
  slideshow Slideshow @relation(fields: [slideshowId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  slideshowId String
  title String @db.VarChar(100)
  description String @db.Text
  type SlideType
  url String @db.VarChar(250)
  order Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SlideshowProgress {
  id String @id @default(uuid())
  slideshow Slideshow @relation(fields: [slideshowId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  slideshowId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  status Status @default(LOCKED)
  progress Float? @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum NotificationTypes {
  INFO
  REMINDER
  ALERT
}

enum FileTypes {
  PDF
  AUDIO
  IMAGE
}

enum ExerciseTypes {
  FILL_IN_THE_BLANKS
  MULTIPLE_CHOICE_QUESTION
  CORRECT_OR_INCORRECT
  MATCH_THE_COLUMNS
  UNSCRAMBLE_WORD
  UNSCRAMBLE_SENTENCE
  LISTENING_COMPREHENSION
  PICTIONARY
  FREE_ANSWER_QUESTION
  TRANSLATION
  SPEAKING_EXERCISE
  VIDEO_QUESTION
}

enum CEFRLevels {
  A1
  A2
  B1
  B2
  C1
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum UserRoles {
  ADMIN
  STUDENT
}

enum Status {
  LOCKED
  IN_PROGRESS
  COMPLETED
}

enum SlideType {
  IMAGE
  VIDEO
}