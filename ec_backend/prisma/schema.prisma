generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  name String @db.VarChar(150)
  bio String? @db.Text
  city String? @db.VarChar(50)
  state String? @db.VarChar(50)
  country String? @db.VarChar(50)
  avatarUrl String? @db.VarChar(250)
  languageLevel CEFRLevels @default(A1)
  email String @db.VarChar(250) @unique
  isEmailVerified Boolean @default(false)
  emailVerificationToken String? @db.VarChar(64)
  password String @db.VarChar(255)
  refreshToken String? @db.Text
  passwordResetToken String? @db.VarChar(64)
  resetPasswordExpires DateTime? @db.DateTime()
  role UserRoles
  lastLogin DateTime? @db.DateTime()
  units UserUnit[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
}

model Student {
  id String @id @default(uuid())
  name String @db.VarChar(100)
  age Int
  birthdate DateTime @db.Date
  city String @db.VarChar(50)
  state String @db.VarChar(50)
  country String @db.VarChar(50)
  answeredExercises AnsweredExercise[]
  answeredQuizzes AnsweredQuiz[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([city])
  @@index([state])
  @@index([country])
}

model Exercise {
  id Int @id @default(autoincrement())
  type ExerciseTypes
  description String @db.Text
  contentUrl String? @db.VarChar(255)
  level CEFRLevels
  difficulty Difficulty
  options Json?
  correctAnswer Json
  tags ExerciseTag[]
  quiz Quiz? @relation(fields: [quizId], references: [id])
  quizId String?
  studentAnswers AnsweredExercise[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([level])
  @@index([difficulty])
  @@index([quizId])
}

model AnsweredExercise {
  id String @id @default(uuid())
  exercise Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId Int
  student Student @relation(fields: [studentId], references: [id])
  studentId String
  quiz AnsweredQuiz? @relation(fields: [quizId], references: [id])
  quizId String?
  isRetry Boolean @default(false)
  selectedAnswers Json?
  textAnswer String? @db.VarChar(255)
  audioUrl String? @db.VarChar(150)
  isCorrectAnswer Boolean @default(false)
  feedback String? @db.Text
  elapsedTime Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([studentId])
  @@index([exerciseId])
  @@index([quizId])
}

model Quiz {
  id String @id @default(uuid())
  isTest Boolean @default(false)
  title String @db.VarChar(50)
  description String @db.Text
  imageUrl String? @db.VarChar(150)
  level CEFRLevels?
  difficulty Difficulty
  tags QuizTag[]
  unit Unit? @relation(fields: [unitId], references: [id])
  unitId Int?
  exercises Exercise[]
  answers AnsweredQuiz[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([level])
  @@index([difficulty])
}

model AnsweredQuiz {
  id String @id @default(uuid())
  quiz Quiz @relation(fields: [quizId], references: [id])
  quizId String
  student Student @relation(fields: [studentId], references: [id])
  studentId String
  answers AnsweredExercise[]
  score Int 
  feedback String? @db.Text
  elapsedTime Int @default(0)
  isRetry Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([studentId])
  @@index([quizId])
  @@index([studentId, quizId])
}

model Tag {
  id Int @id @default(autoincrement())
  title String @db.VarChar(100) @unique
  exerciseTags ExerciseTag[]
  quizTags QuizTag[]
  unitTags UnitTag[]
  videoTags VideoTag[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model ExerciseTag {
  exercise Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId Int
  tag Tag @relation(fields: [tagId], references: [id])
  tagId Int

  @@id([exerciseId, tagId])
}

model QuizTag {
  quiz Quiz @relation(fields: [quizId], references: [id])
  quizId String
  tag Tag @relation(fields: [tagId], references: [id])
  tagId Int

  @@id([quizId, tagId])
}

model UnitTag {
  unit Unit @relation(fields: [unitId], references: [id])
  unitId Int
  tag Tag @relation(fields: [tagId], references: [id])
  tagId Int

  @@id([unitId, tagId])
}

model VideoTag {
  video Video @relation(fields: [videoId], references: [id])
  videoId String
  tag Tag @relation(fields: [tagId], references: [id])
  tagId Int

  @@id([videoId, tagId])
}

model Unit {
  id Int @id @default(autoincrement())
  name String @db.VarChar(150)
  description String @db.VarChar(200)
  videos Video[]
  tags UnitTag[]
  quizContent Quiz[]
  users UserUnit[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserUnit {
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  unit Unit @relation(fields: [unitId], references: [id])
  unitId Int
  status UnitStatus @default(LOCKED)
  progress Float @default(0)
  completedAt DateTime? @db.DateTime()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([userId, status])
  @@index([userId, unitId])
}

model Video {
  id String @id @default(uuid())
  title String
  description String?
  url String  
  duration Int? 
  thumbnail String? 
  videoTags VideoTag[]
  unit Unit? @relation(fields: [unitId], references: [id])
  unitId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ExerciseTypes {
  FILL_IN_THE_BLANKS
  MULTIPLE_CHOICE_QUESTION
  CORRECT_OR_INCORRECT
  MATCH_THE_COLUMNS
  UNSCRAMBLE_WORD
  UNSCRAMBLE_SENTENCE
  LISTENING_COMPREHENSION
  PICTIONARY
  FREE_ANSWER_QUESTION
  TRANSLATION
  SPEAKING_EXERCISE
  VIDEO_QUESTION
}

enum CEFRLevels {
  A1
  A2
  B1
  B2
  C1
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum UserRoles {
  ADMIN
  STUDENT
}

enum UnitStatus {
  LOCKED
  IN_PROGRESS
  COMPLETED
}